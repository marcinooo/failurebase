{"version":3,"file":"static/js/118.e71d6611.chunk.js","mappings":"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","sources":["services/TestService.ts","pages/TestsPage/TestsPage.tsx"],"sourcesContent":["import request from '../http'\r\n\r\nconst getAll = async (params: URLSearchParams): Promise<any> => {\r\n  return await request('/api/tests', params.toString())\r\n}\r\n\r\nconst deleteGiven = async (ids: string[]): Promise<any> => {\r\n  const options = {\r\n    method: 'POST',\r\n    body: JSON.stringify({ ids: ids })\r\n  }\r\n  return await request('/api/tests/delete', '', options)\r\n}\r\n\r\nconst TestService = {\r\n  getAll,\r\n  deleteGiven\r\n}\r\n\r\nexport default TestService\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useNavigate, useSearchParams } from 'react-router-dom'\r\nimport Filter from '../../assets/svg/filter.svg'\r\nimport Delete from '../../assets/svg/delete.svg'\r\nimport { useMainContext } from '../../store/MainStore'\r\nimport Table, { Order, type Row } from '../../components/Table/Table'\r\nimport RoundButton from '../../components/RoundButton/RoundButton'\r\nimport ButtonBadge from '../../components/ButtonBadge/ButtonBadge'\r\nimport Modal, { openModal, closeModal } from '../../components/Modal/Modal'\r\nimport ModalHeader from '../../components/Modal/ModalHeader'\r\nimport ModalBody from '../../components/Modal/ModalBody'\r\nimport ModalFooter from '../../components/Modal/ModalFooter'\r\nimport Collapsible, { openCollapsible, closeCollapsible } from '../../components/Collapsible/Collapsible'\r\nimport TestService from '../../services/TestService'\r\nimport ProgressBar from '../../components/ProgressBar/ProgressBar'\r\nimport InfoBadge from '../../components/InfoBadge/InfoBadge'\r\nimport { dumpDate, longText } from '../../utils/functions'\r\nimport './TestsPage.css'\r\n\r\ninterface Test {\r\n  id: number\r\n  uid: string\r\n  file: string\r\n  marks: string[]\r\n  total_events_count: number\r\n};\r\n\r\nconst createRow = (test: Test): Row => {\r\n  const row = {\r\n    id: test.id.toString(),\r\n    data: [\r\n      { id: 'uid', label: longText(test.uid, 100) },\r\n      { id: 'file', label: longText(test.file, 100) },\r\n      { id: 'total_events_count', label: test.total_events_count.toString() },\r\n      { id: 'test-marks', label: test.marks.join(', ') }\r\n    ]\r\n  }\r\n  return row\r\n}\r\n\r\nconst header = [\r\n  {\r\n    id: 'uid-collumn',\r\n    label: 'UID',\r\n    order: Order.ASC\r\n  },\r\n  {\r\n    id: 'file-collumn',\r\n    label: 'File',\r\n    order: Order.DESC\r\n  },\r\n  {\r\n    id: 'total-events-count-collumn',\r\n    label: 'Events Count',\r\n    order: Order.ASC\r\n  },\r\n  {\r\n    id: 'marks-collumn',\r\n    label: 'Marks',\r\n    order: Order.NULL\r\n  }\r\n]\r\n\r\nconst TestsPage: React.FC = () => {\r\n  const navigate = useNavigate()\r\n  const { setLoading, selectedTests, setSelectedTests } = useMainContext()\r\n  const [searchParams, setSearchParams] = useSearchParams()\r\n  const [filterParams, setFilterParams] = useState<Record<string, any>>({})\r\n  const [numberOfFilterParams, setNumberOfFilterParams] = useState<number>(0)\r\n  const [tests, setTests] = useState<Row[]>([])\r\n  const [pageNumber, setPageNumber] = useState<number>(0)\r\n  const [nextPage, setNextPage] = useState<boolean>(false)\r\n  const [prevPage, setPrevPage] = useState<boolean>(false)\r\n  const [count, setCount] = useState<number>(0)\r\n  const [pageLimit, setPageLimit] = useState<number>(0)\r\n  const [areSelectedAll, setAreSelectedAll] = useState<boolean>(false)\r\n  const [deletionStatus, setDeletionStatus] = useState<string>('')\r\n\r\n  const fetchTests = (): void => {\r\n    setLoading(true)\r\n\r\n    TestService.getAll(searchParams)\r\n      .then((response) => {\r\n        const tests = response.items.map((test: Test) => createRow(test))\r\n        const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n        const newFilterParams: Record<string, any> = {}\r\n\r\n        filterInputs.forEach((item: HTMLInputElement) => {\r\n          const paramName: string = item.id.split('-').slice(1, -1).join('_') ?? ''\r\n          const valueToSet: string[] = searchParams.getAll(paramName)\r\n\r\n          if (valueToSet.length > 0) {\r\n            if (paramName.includes('timestamp')) {\r\n              newFilterParams[paramName] = dumpDate(new Date(valueToSet[0]))\r\n            } else if (paramName.includes('mark')) {\r\n              newFilterParams.marks = valueToSet\r\n            } else {\r\n              newFilterParams[paramName] = valueToSet[0]\r\n            }\r\n          }\r\n        })\r\n\r\n        const newAreSelectedAll = selectedTests.length !== 0 && (\r\n          tests.filter((item: Row) => selectedTests.includes(item.id)).length === tests.length\r\n        )\r\n\r\n        setTests(tests)\r\n        setPageNumber(response.page_number)\r\n        setPrevPage(response.prev_page)\r\n        setNextPage(response.next_page)\r\n        setCount(response.count)\r\n        setPageLimit(response.page_limit)\r\n        setAreSelectedAll(newAreSelectedAll)\r\n        setFilterParams(newFilterParams)\r\n        setLoading(false)\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  useEffect(fetchTests, [window.location.href])\r\n\r\n  useEffect(() => {\r\n    setNumberOfFilterParams(Object.keys(filterParams).length)\r\n  }, [filterParams])\r\n\r\n  const onSelectAllChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setAreSelectedAll(!areSelectedAll)\r\n    if (areSelectedAll) {\r\n      const testsOnCurrentPage = tests.map(item => item.id)\r\n      const newSelectedTests = selectedTests.filter(item => !testsOnCurrentPage.includes(item))\r\n      setSelectedTests(newSelectedTests)\r\n    } else {\r\n      const testsOnCurrentPageToAdd = tests.filter(item => !selectedTests.includes(item.id)).map(item => item.id)\r\n      const newSelectedTests: string[] = [...selectedTests, ...testsOnCurrentPageToAdd]\r\n      setSelectedTests(newSelectedTests)\r\n    }\r\n  }\r\n\r\n  const onSelectOneChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { id, checked } = event.target\r\n    const newSelectedTests = checked ? [...selectedTests, id] : selectedTests.filter(item => item !== id)\r\n    const newAreSelectedAll = tests.filter(item => newSelectedTests.includes(item.id)).length === tests.length\r\n    setAreSelectedAll(newAreSelectedAll)\r\n    setSelectedTests(newSelectedTests)\r\n  }\r\n\r\n  const handleSorting = (id: string, order: Order): void => {\r\n    const orderPropertyName = id.replace('-collumn', '').replaceAll('-', '_')\r\n    const value = `${order === Order.DESC ? '-' : ''}${orderPropertyName}`\r\n    searchParams.set('ordering', value)\r\n    setSearchParams(searchParams)\r\n    navigate({ pathname: '/tests', search: '?' + String(searchParams) })\r\n  }\r\n\r\n  /**\r\n   * Open filter modal\r\n   */\r\n  const handleFilterButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('filter-modal')\r\n    // Fill filter inputs\r\n    const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n    filterInputs.forEach((item: HTMLInputElement) => {\r\n      const valueToSet: string = searchParams.get(item.id.split('-').slice(1, -1).join('_')) ?? ''\r\n      if (valueToSet !== '') {\r\n        if (item.id.includes('timestamp')) {\r\n          item.value = dumpDate(new Date(valueToSet))\r\n        } else if (item.id.includes('mark')) {\r\n          item.value = ''\r\n        } else {\r\n          item.value = valueToSet\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Send filter query\r\n   */\r\n  const handleFilterModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    // Redirect with added filters\r\n    for (const [key, val] of Object.entries(filterParams)) {\r\n      if (key === 'marks') {\r\n        searchParams.delete('mark')\r\n        for (let i = 0; i < val.length; i++) {\r\n          searchParams.append('mark', String(val[i]))\r\n        }\r\n      } else {\r\n        searchParams.set(key, String(val))\r\n      }\r\n    }\r\n    searchParams.delete('page')\r\n    setSearchParams(searchParams)\r\n    setSelectedTests([])\r\n    setAreSelectedAll(false)\r\n    closeModal('filter-modal')\r\n  }\r\n\r\n  /**\r\n   * Clear fields\r\n   */\r\n  const handleFilterModalClearButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n    filterInputs.forEach((item: HTMLInputElement) => {\r\n      item.value = ''\r\n      searchParams.delete(item.id.split('-').slice(1, -1).join('_'))\r\n    })\r\n    setFilterParams({})\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  const handleFilterInputFiled = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const queryParamName: string = event.target.id.split('-').slice(1, -1).join('_')\r\n    const value = queryParamName.includes('timestamp') ? dumpDate(new Date(event.target.value)) : event.target.value\r\n    if (event.target.value === '' && queryParamName in filterParams) {\r\n      const { [queryParamName]: _, ...rest } = filterParams\r\n      setFilterParams(rest)\r\n    } else {\r\n      setFilterParams({ ...filterParams, [queryParamName]: value })\r\n    }\r\n  }\r\n\r\n  const onAddMarksButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    const marksInput = document.querySelector('#filter-mark-input') as HTMLInputElement\r\n    if (marksInput !== null) {\r\n      const newFilterParams = { ...filterParams }\r\n      if (\r\n        marksInput.value !== '' &&\r\n        (newFilterParams.marks === undefined || newFilterParams.marks.indexOf(marksInput.value) === -1)\r\n      ) {\r\n        newFilterParams.marks = [...(newFilterParams.marks ?? []), marksInput.value]\r\n      }\r\n      marksInput.value = ''\r\n      setFilterParams(newFilterParams)\r\n    }\r\n  }\r\n\r\n  const onCloseMarkButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    if ('marks' in filterParams) {\r\n      const newFilterParams = { ...filterParams }\r\n      newFilterParams.marks = filterParams.marks.filter(\r\n        (item: string) => item !== event.currentTarget.parentNode?.textContent\r\n      )\r\n      setFilterParams(newFilterParams)\r\n    }\r\n  }\r\n\r\n  const handleDeleteButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('delete-modal')\r\n  }\r\n\r\n  const handleDeleteModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    if (selectedTests.length !== 0) {\r\n      openCollapsible('deletion-in-progress')\r\n      TestService.deleteGiven(selectedTests)\r\n        .then((response) => {\r\n          const successes: string[] = []\r\n          const failures: string[] = []\r\n          response.statuses.forEach((item: any) => {\r\n            if (item.status === 200) {\r\n              successes.push(String(item.id))\r\n            } else {\r\n              failures.push(String(item.id))\r\n            }\r\n          })\r\n          const summary = failures.length === 0\r\n            ? 'All tests deleted successfully'\r\n            : `${successes.length} tests deleted successfully, the rest no longer exist in database.`\r\n          setDeletionStatus(summary) // change name to summary\r\n          setSelectedTests([])\r\n          setTimeout(() => {\r\n            closeCollapsible('deletion-in-progress')\r\n            openCollapsible('deletion-done')\r\n          }, 1000)\r\n        })\r\n        .catch((error) => {\r\n          setDeletionStatus('Deletion error')\r\n          setTimeout(() => {\r\n            closeCollapsible('deletion-in-progress')\r\n            openCollapsible('deletion-done')\r\n          }, 1000)\r\n          console.log(`Error details: ${String(error?.response?.detail ?? 'no details ')}`)\r\n        })\r\n    }\r\n  }\r\n\r\n  const onDeleteModalCloseButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    setDeletionStatus('')\r\n    closeCollapsible('deletion-done')\r\n    closeModal('delete-modal')\r\n    if (deletionStatus !== '') { fetchTests() }\r\n  }\r\n\r\n  const handleUnselectButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('unselect-modal')\r\n  }\r\n\r\n  const onUnselectModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    setAreSelectedAll(false)\r\n    setSelectedTests([])\r\n    closeModal('unselect-modal')\r\n  }\r\n\r\n  const onNextPageClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    searchParams.set('page', String(pageNumber + 1))\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  const onPrevPageClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    searchParams.set('page', String(pageNumber - 1))\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filters\">\r\n        <div className=\"row\">\r\n          <div className=\"col filter-button\">\r\n            <span className=\"brand\">Tests</span>\r\n            <RoundButton onClick={handleFilterButtonClick}>\r\n              <img src={Filter} alt=\"Filter SVG\" />\r\n              {numberOfFilterParams > 0 && (\r\n                <ButtonBadge text={numberOfFilterParams} />\r\n              )}\r\n            </RoundButton>\r\n            <RoundButton onClick={handleDeleteButtonClick}>\r\n              <img src={Delete} alt=\"Delete SVG\" />\r\n            </RoundButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filter modal */}\r\n\r\n        <Modal id=\"filter-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Filter tests</span>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              <label htmlFor=\"filter-uid-input\">UID</label>\r\n              <input id=\"filter-uid-input\"\r\n                type=\"text\"\r\n                placeholder=\"Type phrase to search\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-file-input\">File</label>\r\n              <input id=\"filter-file-input\"\r\n                type=\"text\"\r\n                placeholder=\"Type phrase to search\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-mark-input\">Mark</label>\r\n              <span className=\"grouped\">\r\n                <input id=\"filter-mark-input\"\r\n                  type=\"text\"\r\n                  placeholder=\"Type mark to search\"\r\n                />\r\n                <button id=\"addMark\" className=\"button\" onClick={ onAddMarksButtonClick }>Add</button>\r\n              </span>\r\n              <span>\r\n                {filterParams?.marks?.map((item: string, id: number) =>\r\n                  <InfoBadge key={id} text={item} onClose={onCloseMarkButtonClick}/>\r\n                )}\r\n              </span>\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={handleFilterModalConfirmButtonClick}>Submit</button>\r\n            <button className=\"button\" onClick={handleFilterModalClearButtonClick}>Clear</button>\r\n            <button className=\"button\" onClick={(e) => { closeModal('filter-modal') }}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Delete modal */}\r\n\r\n        <Modal id=\"delete-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Delete tests</span>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            {selectedTests.length === 0\r\n              ? <strong>No tests selected to deletion.</strong>\r\n              : selectedTests.length === 1\r\n                ? <><strong>1 test selected to deletion. </strong>Do you confirm deletion?</>\r\n                : <><strong>{selectedTests.length} tests selected to deletion. </strong>\r\n                    Do you confirm deletion?\r\n                  </>}\r\n            <Collapsible id=\"deletion-in-progress\">\r\n              <div style={ { marginBottom: '10px' } }>\r\n                <span>Deleting...</span>\r\n              </div>\r\n              <ProgressBar/>\r\n            </Collapsible>\r\n            <Collapsible id=\"deletion-done\">\r\n              <span className=\"text-primary\">Result:</span><br/>\r\n              <span dangerouslySetInnerHTML={{ __html: deletionStatus }}></span>\r\n            </Collapsible>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={handleDeleteModalConfirmButtonClick}>Confirm</button>\r\n            <button className=\"button\" onClick={onDeleteModalCloseButtonClick}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Unselect modal */}\r\n\r\n        <Modal id=\"unselect-modal\">\r\n          <ModalHeader>\r\n            Unselect items\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            Do you confirm unselection of all items?\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={onUnselectModalConfirmButtonClick}>Confirm</button>\r\n            <button className=\"button\" onClick={(e) => { closeModal('unselect-modal') }}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n      </div>\r\n\r\n      <Table\r\n        header={header}\r\n        data={tests}\r\n        selectedItemsInfo={selectedTests.length === 0\r\n          ? ''\r\n          : selectedTests.length === 1 ? '1 row selected' : `${selectedTests.length} rows selected`}\r\n        pageInfo={`page ${pageNumber + 1} of ${count !== 0 ? Math.ceil(count / pageLimit) : 1}`}\r\n        secectedItems={selectedTests}\r\n        selectAllChecked={areSelectedAll}\r\n        prevPageDisabled={!prevPage}\r\n        nextPageDisabled={!nextPage}\r\n        onSortClick={handleSorting}\r\n        onSelectAllChange={onSelectAllChange}\r\n        onSelectOneChange={onSelectOneChange}\r\n        onNextPageClick={onNextPageClick}\r\n        onPrevPageClick={onPrevPageClick}\r\n        onSelectedItemsClearClick={handleUnselectButtonClick}\r\n      />\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TestsPage\r\n"],"names":["getAll","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","wrap","_context","prev","next","request","toString","abrupt","sent","stop","_x","apply","arguments","deleteGiven","_ref2","_callee2","ids","options","_context2","method","body","JSON","stringify","_x2","header","id","label","order","Order","ASC","DESC","NULL","_filterParams$marks","navigate","useNavigate","_useMainContext","useMainContext","setLoading","selectedTests","setSelectedTests","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","filterParams","setFilterParams","_useState3","_useState4","numberOfFilterParams","setNumberOfFilterParams","_useState5","_useState6","tests","setTests","_useState7","_useState8","pageNumber","setPageNumber","_useState9","_useState10","nextPage","setNextPage","_useState11","_useState12","prevPage","setPrevPage","_useState13","_useState14","count","setCount","_useState15","_useState16","pageLimit","setPageLimit","_useState17","_useState18","areSelectedAll","setAreSelectedAll","_useState19","_useState20","deletionStatus","setDeletionStatus","fetchTests","TestService","then","response","items","map","test","data","longText","uid","file","total_events_count","marks","join","createRow","filterInputs","document","querySelectorAll","newFilterParams","forEach","item","_item$id$split$slice$","paramName","split","slice","valueToSet","length","includes","dumpDate","Date","newAreSelectedAll","filter","page_number","prev_page","next_page","page_limit","catch","e","console","log","useEffect","window","location","href","Object","keys","handleFilterInputFiled","event","queryParamName","target","value","rest","_objectWithoutProperties","_toPropertyKey","_objectSpread","_defineProperty","onCloseMarkButtonClick","_event$currentTarget$","currentTarget","parentNode","textContent","_jsxs","_Fragment","children","className","_jsx","RoundButton","onClick","openModal","_searchParams$get","get","src","Filter","alt","ButtonBadge","text","Delete","Modal","ModalHeader","ModalBody","htmlFor","type","placeholder","onChange","marksInput","querySelector","_newFilterParams$mark","undefined","indexOf","concat","_toConsumableArray","InfoBadge","onClose","ModalFooter","_i","_Object$entries","entries","_Object$entries$_i","key","val","delete","i","append","String","set","closeModal","Collapsible","style","marginBottom","ProgressBar","dangerouslySetInnerHTML","__html","openCollapsible","successes","failures","statuses","status","push","summary","setTimeout","closeCollapsible","error","_error$response$detai","_error$response","detail","Table","selectedItemsInfo","pageInfo","Math","ceil","secectedItems","selectAllChecked","prevPageDisabled","nextPageDisabled","onSortClick","orderPropertyName","replace","replaceAll","pathname","search","onSelectAllChange","testsOnCurrentPage","newSelectedTests","testsOnCurrentPageToAdd","onSelectOneChange","_event$target","checked","onNextPageClick","onPrevPageClick","onSelectedItemsClearClick"],"sourceRoot":""}