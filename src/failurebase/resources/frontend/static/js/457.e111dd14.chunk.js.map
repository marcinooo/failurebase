{"version":3,"file":"static/js/457.e111dd14.chunk.js","mappings":"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","sources":["assets/svg/add.svg","services/ClientService.ts","pages/ClientsPage/ClientsPage.tsx"],"sourcesContent":["var _line, _line2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgAdd(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"rgb(8, 126, 164)\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    className: \"feather feather-plus\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 12,\n    y1: 5,\n    x2: 12,\n    y2: 19\n  })), _line2 || (_line2 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 5,\n    y1: 12,\n    x2: 19,\n    y2: 12\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAdd);\nexport default __webpack_public_path__ + \"static/media/add.1e46d46361ac47a0548aca7f0a4495e2.svg\";\nexport { ForwardRef as ReactComponent };","import request from '../http'\r\n\r\nconst getAll = async (params: URLSearchParams): Promise<any> => {\r\n  return await request('/api/clients', params.toString())\r\n}\r\n\r\nconst deleteGiven = async (ids: string[], apiKey: string): Promise<any> => {\r\n  const options = {\r\n    method: 'POST',\r\n    body: JSON.stringify({ ids }),\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json;charset=UTF-8',\r\n      'Api-Key': apiKey\r\n    }\r\n  }\r\n  return await request('/api/clients/delete', '', options)\r\n}\r\n\r\nconst add = async (apiKey: string): Promise<any> => {\r\n  const options = {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json;charset=UTF-8',\r\n      'Api-Key': apiKey\r\n    }\r\n  }\r\n  return await request('/api/clients', '', options)\r\n}\r\n\r\nconst update = async (id: number, apiKey: string): Promise<any> => {\r\n  const options = {\r\n    method: 'PUT',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json;charset=UTF-8',\r\n      'Api-Key': apiKey\r\n    }\r\n  }\r\n  return await request(`/api/clients/${id}`, '', options)\r\n}\r\n\r\nconst ClientService = {\r\n  getAll,\r\n  deleteGiven,\r\n  add,\r\n  update\r\n}\r\n\r\nexport default ClientService\r\n","import React, { useState, useEffect, type ReactNode, type ReactElement } from 'react'\r\nimport { useNavigate, useSearchParams } from 'react-router-dom'\r\nimport Filter from '../../assets/svg/filter.svg'\r\nimport Delete from '../../assets/svg/delete.svg'\r\nimport Add from '../../assets/svg/add.svg'\r\nimport { useMainContext } from '../../store/MainStore'\r\nimport Table, { Order, type Row } from '../../components/Table/Table'\r\nimport RoundButton from '../../components/RoundButton/RoundButton'\r\nimport ButtonBadge from '../../components/ButtonBadge/ButtonBadge'\r\nimport Modal, { openModal, closeModal } from '../../components/Modal/Modal'\r\nimport ModalHeader from '../../components/Modal/ModalHeader'\r\nimport ModalBody from '../../components/Modal/ModalBody'\r\nimport ModalFooter from '../../components/Modal/ModalFooter'\r\nimport Collapsible, { openCollapsible, closeCollapsible } from '../../components/Collapsible/Collapsible'\r\nimport ClientService from '../../services/ClientService'\r\nimport ProgressBar from '../../components/ProgressBar/ProgressBar'\r\nimport ApiKeyInput from '../../components/ApiKeyInput/ApiKeyInput'\r\nimport { dumpDate, parseDeletionResponse } from '../../utils/functions'\r\nimport './ClientsPage.css'\r\n\r\ninterface Client {\r\n  id: number\r\n  uid: string\r\n  secret: string\r\n  created: string\r\n};\r\n\r\nconst header = [\r\n  {\r\n    id: 'uid-collumn',\r\n    label: 'UID',\r\n    order: Order.ASC\r\n  },\r\n  {\r\n    id: 'secret-collumn',\r\n    label: 'Secret',\r\n    order: Order.NULL\r\n  },\r\n  {\r\n    id: 'created-collumn',\r\n    label: 'Created',\r\n    order: Order.ASC\r\n  }\r\n]\r\n\r\nconst ClientsPage: React.FC = () => {\r\n  const navigate = useNavigate()\r\n  const { setLoading, selectedClients, setSelectedClients } = useMainContext()\r\n  const [searchParams, setSearchParams] = useSearchParams()\r\n  const [filterParams, setFilterParams] = useState<Record<string, any>>({})\r\n  const [numberOfFilterParams, setNumberOfFilterParams] = useState<number>(0)\r\n  const [clients, setClients] = useState<Row[]>([])\r\n  const [pageNumber, setPageNumber] = useState<number>(0)\r\n  const [nextPage, setNextPage] = useState<boolean>(false)\r\n  const [prevPage, setPrevPage] = useState<boolean>(false)\r\n  const [count, setCount] = useState<number>(0)\r\n  const [pageLimit, setPageLimit] = useState<number>(0)\r\n  const [areSelectedAll, setAreSelectedAll] = useState<boolean>(false)\r\n  const [operationStatus, setOperationStatus] = useState<ReactNode | ReactElement>()\r\n  const [activeClientDetails, setActiveClientDetails] = useState<Client>()\r\n  const [apiKey, setApiKey] = useState<string>('')\r\n\r\n  const createRow = (client: Client): Row => {\r\n    const row = {\r\n      id: client.id.toString(),\r\n      data: [\r\n        {\r\n          id: 'uid',\r\n          label: client.uid,\r\n          onClick: () => { setActiveClientDetails(client); openModal('detail-modal') }\r\n        },\r\n        {\r\n          id: 'secret',\r\n          label: client.secret\r\n        },\r\n        {\r\n          id: 'created',\r\n          label: client.created.replace('T', '  ')\r\n        }\r\n      ]\r\n    }\r\n    return row\r\n  }\r\n\r\n  const fetchClients = (): void => {\r\n    setLoading(true)\r\n\r\n    ClientService.getAll(searchParams)\r\n      .then((response) => {\r\n        const clients = response.items.map((client: Client) => createRow(client))\r\n        const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n        const newFilterParams: Record<string, any> = {}\r\n\r\n        filterInputs.forEach((item: HTMLInputElement) => {\r\n          const paramName: string = item.id.split('-').slice(1, -1).join('_') ?? ''\r\n          const valueToSet: string[] = searchParams.getAll(paramName)\r\n\r\n          if (valueToSet.length > 0) {\r\n            if (paramName.includes('created')) {\r\n              newFilterParams[paramName] = dumpDate(new Date(valueToSet[0]))\r\n            } else {\r\n              newFilterParams[paramName] = valueToSet[0]\r\n            }\r\n          }\r\n        })\r\n\r\n        const newAreSelectedAll = selectedClients.length !== 0 && (\r\n          clients.filter((item: Row) => selectedClients.includes(item.id)).length === clients.length\r\n        )\r\n\r\n        setClients(clients)\r\n        setPageNumber(response.page_number)\r\n        setPrevPage(response.prev_page)\r\n        setNextPage(response.next_page)\r\n        setCount(response.count)\r\n        setPageLimit(response.page_limit)\r\n        setAreSelectedAll(newAreSelectedAll)\r\n        setFilterParams(newFilterParams)\r\n        setLoading(false)\r\n      })\r\n      .catch((e) => {\r\n        console.error(e)\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  useEffect(fetchClients, [window.location.href])\r\n\r\n  useEffect(() => {\r\n    setNumberOfFilterParams(Object.keys(filterParams).length)\r\n  }, [filterParams])\r\n\r\n  const onSelectAllChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setAreSelectedAll(!areSelectedAll)\r\n    if (areSelectedAll) {\r\n      const clientsOnCurrentPage = clients.map(item => item.id)\r\n      const newSelectedClients = selectedClients.filter(item => !clientsOnCurrentPage.includes(item))\r\n      setSelectedClients(newSelectedClients)\r\n    } else {\r\n      const clientsOnCurrentPageToAdd = clients.filter(item => !selectedClients.includes(item.id)).map(item => item.id)\r\n      const newSelectedClients: string[] = [...selectedClients, ...clientsOnCurrentPageToAdd]\r\n      setSelectedClients(newSelectedClients)\r\n    }\r\n  }\r\n\r\n  const onSelectOneChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { id, checked } = event.target\r\n    const newSelectedClients = checked ? [...selectedClients, id] : selectedClients.filter(item => item !== id)\r\n    const newAreSelectedAll = clients.filter(item => newSelectedClients.includes(item.id)).length === clients.length\r\n    setAreSelectedAll(newAreSelectedAll)\r\n    setSelectedClients(newSelectedClients)\r\n  }\r\n\r\n  const handleSorting = (id: string, order: Order): void => {\r\n    const orderPropertyName = id.replace('-collumn', '').replaceAll('-', '_')\r\n    const value = `${order === Order.DESC ? '-' : ''}${orderPropertyName}`\r\n    searchParams.set('ordering', value)\r\n    setSearchParams(searchParams)\r\n    navigate({ pathname: '/clients', search: '?' + String(searchParams) })\r\n  }\r\n\r\n  /**\r\n   * Open filter modal\r\n   */\r\n  const handleFilterButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('filter-modal')\r\n    // Fill filter inputs\r\n    const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n    filterInputs.forEach((item: HTMLInputElement) => {\r\n      const valueToSet: string = searchParams.get(item.id.split('-').slice(1, -1).join('_')) ?? ''\r\n      if (valueToSet !== '') {\r\n        if (item.id.includes('created')) {\r\n          item.value = dumpDate(new Date(valueToSet))\r\n        } else {\r\n          item.value = valueToSet\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Send filter query\r\n   */\r\n  const handleFilterModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    // Redirect with added filters\r\n    for (const [key, val] of Object.entries(filterParams)) {\r\n      searchParams.set(key, String(val))\r\n    }\r\n    searchParams.delete('page')\r\n    setSearchParams(searchParams)\r\n    setSelectedClients([])\r\n    setAreSelectedAll(false)\r\n    closeModal('filter-modal')\r\n  }\r\n\r\n  /**\r\n   * Clear fields\r\n   */\r\n  const handleFilterModalClearButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n    filterInputs.forEach((item: HTMLInputElement) => {\r\n      item.value = ''\r\n      searchParams.delete(item.id.split('-').slice(1, -1).join('_'))\r\n    })\r\n    setFilterParams({})\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  const handleFilterInputFiled = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const queryParamName: string = event.target.id.split('-').slice(1, -1).join('_')\r\n    const value = queryParamName.includes('created') ? dumpDate(new Date(event.target.value)) : event.target.value\r\n    if (event.target.value === '' && queryParamName in filterParams) {\r\n      const { [queryParamName]: _, ...rest } = filterParams\r\n      setFilterParams(rest)\r\n    } else {\r\n      setFilterParams({ ...filterParams, [queryParamName]: value })\r\n    }\r\n  }\r\n\r\n  const handleDeleteButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('delete-modal')\r\n  }\r\n\r\n  const handleDeleteModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    if (selectedClients.length !== 0) {\r\n      openCollapsible('deletion-in-progress')\r\n      ClientService.deleteGiven(selectedClients, apiKey)\r\n        .then((responseData) => {\r\n          const summary = parseDeletionResponse(responseData)\r\n          setOperationStatus(summary) // change name to summary\r\n          setTimeout(() => {\r\n            setSelectedClients([])\r\n            closeCollapsible('deletion-in-progress')\r\n            openCollapsible('deletion-done')\r\n          }, 1000)\r\n        })\r\n        .catch((error) => {\r\n          setOperationStatus(<p className=\"text-error\">Deletion error</p>)\r\n          setTimeout(() => {\r\n            closeCollapsible('deletion-in-progress')\r\n            openCollapsible('deletion-done')\r\n          }, 1000)\r\n          console.error(`Error details: ${String(error?.response?.detail ?? 'no details ')}`)\r\n        })\r\n    }\r\n  }\r\n\r\n  const onDeleteModalCloseButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    setOperationStatus('')\r\n    setApiKey('')\r\n    closeCollapsible('deletion-done')\r\n    closeModal('delete-modal')\r\n    if (operationStatus !== '') { fetchClients() }\r\n  }\r\n\r\n  const handleUnselectButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('unselect-modal')\r\n  }\r\n\r\n  const onUnselectModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    setAreSelectedAll(false)\r\n    setSelectedClients([])\r\n    closeModal('unselect-modal')\r\n  }\r\n\r\n  const handleAddButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('add-modal')\r\n  }\r\n\r\n  const onAddModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openCollapsible('adding-in-progress')\r\n    closeCollapsible('adding-done')\r\n    ClientService.add(apiKey)\r\n      .then((responseData) => {\r\n        if ('uid' in responseData) {\r\n          setOperationStatus(<>\r\n            <strong>UID: </strong>{responseData?.uid}<br/>\r\n            <strong>Secret: </strong>{responseData?.secret}\r\n          </>)\r\n        } else if ('detail' in responseData) {\r\n          setOperationStatus(<p className=\"text-error\">{responseData.detail}</p>)\r\n        } else {\r\n          setOperationStatus(<p className=\"text-error\">Adding error</p>)\r\n        }\r\n        setTimeout(() => {\r\n          closeCollapsible('adding-in-progress')\r\n          openCollapsible('adding-done')\r\n          setApiKey('')\r\n        }, 1000)\r\n      })\r\n      .catch((error) => {\r\n        setOperationStatus(<p className=\"text-error\">Adding error</p>)\r\n        setTimeout(() => {\r\n          closeCollapsible('adding-in-progress')\r\n          openCollapsible('adding-done')\r\n        }, 1000)\r\n        console.error(`Error details: ${String(error?.response?.detail ?? 'no details ')}`)\r\n      })\r\n  }\r\n\r\n  const onAddModalCloseButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    setApiKey('')\r\n    closeCollapsible('adding-done')\r\n    closeModal('add-modal')\r\n    if (operationStatus !== '') { fetchClients() }\r\n  }\r\n\r\n  const onDetailModalCheckButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    closeCollapsible('checking-done')\r\n    if (activeClientDetails === undefined) {\r\n      openCollapsible('checking-done')\r\n      setOperationStatus(<>Could not send request</>)\r\n      return\r\n    }\r\n    ClientService.update(activeClientDetails.id, apiKey)\r\n      .then((responseData) => {\r\n        console.log(responseData)\r\n        if ('uid' in responseData) {\r\n          setActiveClientDetails(responseData)\r\n        } else if ('detail' in responseData) {\r\n          setOperationStatus(<p className=\"text-error\">{responseData.detail}</p>)\r\n          setTimeout(() => {\r\n            openCollapsible('checking-done')\r\n          }, 1000)\r\n        } else {\r\n          setOperationStatus(<p className=\"text-error\">Checking error</p>)\r\n          setTimeout(() => {\r\n            openCollapsible('checking-done')\r\n          }, 1000)\r\n        }\r\n        setApiKey('')\r\n      })\r\n      .catch((error) => {\r\n        setOperationStatus(<p className=\"text-error\">Checking error</p>)\r\n        setTimeout(() => {\r\n          openCollapsible('checking-done')\r\n        }, 1000)\r\n        console.error(`Error details: ${String(error?.response?.detail ?? 'no details ')}`)\r\n      })\r\n  }\r\n\r\n  const onDetailModalCloseButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    setApiKey('')\r\n    closeModal('detail-modal')\r\n  }\r\n\r\n  const onNextPageClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    searchParams.set('page', String(pageNumber + 1))\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  const onPrevPageClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    searchParams.set('page', String(pageNumber - 1))\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filters\">\r\n        <div className=\"row\">\r\n          <div className=\"col filter-button\">\r\n            <span className=\"brand\">Clients</span>\r\n            <RoundButton onClick={handleFilterButtonClick}>\r\n              <img src={Filter} alt=\"Filter SVG\" />\r\n              {numberOfFilterParams > 0 && (\r\n                <ButtonBadge text={numberOfFilterParams} />\r\n              )}\r\n            </RoundButton>\r\n            <RoundButton onClick={handleAddButtonClick}>\r\n              <img src={Add} alt=\"Add SVG\" />\r\n            </RoundButton>\r\n            <RoundButton onClick={handleDeleteButtonClick}>\r\n              <img src={Delete} alt=\"Delete SVG\" />\r\n            </RoundButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filter modal */}\r\n\r\n        <Modal id=\"filter-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Filter clients</span>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              <label htmlFor=\"filter-uid-input\">UID</label>\r\n              <input id=\"filter-uid-input\"\r\n                type=\"text\"\r\n                placeholder=\"Type phrase to search\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-start-created-input\">Start created</label>\r\n              <input\r\n                id=\"filter-start-created-input\"\r\n                type=\"datetime-local\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-end-created-input\">End created</label>\r\n              <input\r\n                id=\"filter-end-created-input\"\r\n                type=\"datetime-local\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={handleFilterModalConfirmButtonClick}>Submit</button>\r\n            <button className=\"button\" onClick={handleFilterModalClearButtonClick}>Clear</button>\r\n            <button className=\"button\" onClick={(e) => { closeModal('filter-modal') }}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Delete modal */}\r\n\r\n        <Modal id=\"delete-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Delete clients</span>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            {(() => {\r\n              if (selectedClients.length === 0) {\r\n                return <strong>No clients selected to deletion.</strong>\r\n              } else {\r\n                const plural = selectedClients.length > 1 ? 's' : ''\r\n                return <strong>{selectedClients.length} client{plural} selected to deletion. </strong>\r\n              }\r\n            })()}\r\n            <ApiKeyInput\r\n              id=\"api-key-delete-modal\"\r\n              labelClassName=\"\"\r\n              inputClassName=\"\"\r\n              labelText=\"API Key\"\r\n              inputValue={apiKey}\r\n              onInputChange={(event) => { setApiKey(event.target.value) } }\r\n            />\r\n            <Collapsible id=\"deletion-in-progress\">\r\n              <div style={ { marginBottom: '10px' } }>\r\n                <span>Deleting...</span>\r\n              </div>\r\n              <ProgressBar/>\r\n            </Collapsible>\r\n            <Collapsible id=\"deletion-done\">\r\n              <span className=\"text-primary\">Result:</span><br/>\r\n              <span>{operationStatus}</span>\r\n            </Collapsible>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={handleDeleteModalConfirmButtonClick} disabled={apiKey === ''}>\r\n              Confirm\r\n            </button>\r\n            <button className=\"button\" onClick={onDeleteModalCloseButtonClick}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Unselect modal */}\r\n\r\n        <Modal id=\"unselect-modal\">\r\n          <ModalHeader>\r\n            Unselect items\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            Do you confirm unselection of all items?\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={onUnselectModalConfirmButtonClick}>Confirm</button>\r\n            <button className=\"button\" onClick={(e) => { closeModal('unselect-modal') }}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Event details modal */}\r\n\r\n        <Modal id=\"detail-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Details</span>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <strong>UID:</strong>\r\n            <p>{activeClientDetails?.uid}</p>\r\n            <strong>Secret:</strong>\r\n            <p>{activeClientDetails?.secret}</p>\r\n            <strong>Created:</strong>\r\n            <p>{activeClientDetails?.created?.replace('T', '  ')}</p>\r\n            <ApiKeyInput\r\n              id=\"api-key-detail-modal\"\r\n              labelClassName=\"\"\r\n              inputClassName=\"\"\r\n              labelText=\"Enter API Key to check secret\"\r\n              inputValue={apiKey}\r\n              onInputChange={(event) => { setApiKey(event.target.value) } }\r\n            />\r\n            <Collapsible id=\"checking-done\">\r\n              <span className=\"text-primary\">Result:</span><br/>\r\n              <span>{operationStatus}</span>\r\n            </Collapsible>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button\" onClick={onDetailModalCheckButtonClick}>Check</button>\r\n            <button className=\"button\" onClick={onDetailModalCloseButtonClick}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Add modal */}\r\n\r\n        <Modal id=\"add-modal\">\r\n          <ModalHeader>\r\n            Add new client\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            Do you confirm adding new client?\r\n            <ApiKeyInput\r\n              id=\"api-key-add-modal\"\r\n              labelClassName=\"\"\r\n              inputClassName=\"\"\r\n              labelText=\"API Key\"\r\n              inputValue={apiKey}\r\n              onInputChange={(event) => { setApiKey(event.target.value) } }\r\n            />\r\n            <Collapsible id=\"adding-in-progress\">\r\n              <div style={ { marginBottom: '10px' } }>\r\n                <span>Adding...</span>\r\n              </div>\r\n              <ProgressBar/>\r\n            </Collapsible>\r\n            <Collapsible id=\"adding-done\">\r\n              <span className=\"text-primary\">Result:</span><br/>\r\n              <span>{operationStatus}</span>\r\n            </Collapsible>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={onAddModalConfirmButtonClick}>Confirm</button>\r\n            <button className=\"button\" onClick={onAddModalCloseButtonClick}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n      </div>\r\n\r\n      <Table\r\n        header={header}\r\n        data={clients}\r\n        selectedItemsInfo={selectedClients.length === 0\r\n          ? ''\r\n          : selectedClients.length === 1 ? '1 row selected' : `${selectedClients.length} rows selected`}\r\n        pageInfo={`page ${pageNumber + 1} of ${count !== 0 ? Math.ceil(count / pageLimit) : 1}`}\r\n        secectedItems={selectedClients}\r\n        selectAllChecked={areSelectedAll}\r\n        prevPageDisabled={!prevPage}\r\n        nextPageDisabled={!nextPage}\r\n        onSortClick={handleSorting}\r\n        onSelectAllChange={onSelectAllChange}\r\n        onSelectOneChange={onSelectOneChange}\r\n        onNextPageClick={onNextPageClick}\r\n        onPrevPageClick={onPrevPageClick}\r\n        onSelectedItemsClearClick={handleUnselectButtonClick}\r\n      />\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ClientsPage\r\n"],"names":["getAll","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","wrap","_context","prev","next","request","toString","abrupt","sent","stop","_x","apply","arguments","deleteGiven","_ref2","_callee2","ids","apiKey","options","_context2","method","body","JSON","stringify","headers","Accept","_x2","_x3","add","_ref3","_callee3","_context3","_x4","update","_ref4","_callee4","id","_context4","concat","_x5","_x6","header","label","order","Order","ASC","NULL","_activeClientDetails$","navigate","useNavigate","_useMainContext","useMainContext","setLoading","selectedClients","setSelectedClients","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","filterParams","setFilterParams","_useState3","_useState4","numberOfFilterParams","setNumberOfFilterParams","_useState5","_useState6","clients","setClients","_useState7","_useState8","pageNumber","setPageNumber","_useState9","_useState10","nextPage","setNextPage","_useState11","_useState12","prevPage","setPrevPage","_useState13","_useState14","count","setCount","_useState15","_useState16","pageLimit","setPageLimit","_useState17","_useState18","areSelectedAll","setAreSelectedAll","_useState19","_useState20","operationStatus","setOperationStatus","_useState21","_useState22","activeClientDetails","setActiveClientDetails","_useState23","_useState24","setApiKey","fetchClients","ClientService","then","response","items","map","client","data","uid","onClick","openModal","secret","created","replace","createRow","filterInputs","document","querySelectorAll","newFilterParams","forEach","item","_item$id$split$slice$","paramName","split","slice","join","valueToSet","length","includes","dumpDate","Date","newAreSelectedAll","filter","page_number","prev_page","next_page","page_limit","catch","e","console","error","useEffect","window","location","href","Object","keys","handleFilterInputFiled","event","queryParamName","target","value","rest","_objectWithoutProperties","_toPropertyKey","_objectSpread","_defineProperty","_jsxs","_Fragment","children","className","_jsx","RoundButton","_searchParams$get","get","src","Filter","alt","ButtonBadge","text","Add","Delete","Modal","ModalHeader","ModalBody","htmlFor","type","placeholder","onChange","ModalFooter","_i","_Object$entries","entries","_Object$entries$_i","key","val","set","String","delete","closeModal","plural","ApiKeyInput","labelClassName","inputClassName","labelText","inputValue","onInputChange","Collapsible","style","marginBottom","ProgressBar","openCollapsible","responseData","summary","parseDeletionResponse","setTimeout","closeCollapsible","_error$response$detai","_error$response","detail","disabled","undefined","log","_error$response$detai3","_error$response3","_error$response$detai2","_error$response2","Table","selectedItemsInfo","pageInfo","Math","ceil","secectedItems","selectAllChecked","prevPageDisabled","nextPageDisabled","onSortClick","orderPropertyName","replaceAll","DESC","pathname","search","onSelectAllChange","clientsOnCurrentPage","newSelectedClients","clientsOnCurrentPageToAdd","_toConsumableArray","onSelectOneChange","_event$target","checked","onNextPageClick","onPrevPageClick","onSelectedItemsClearClick"],"sourceRoot":""}