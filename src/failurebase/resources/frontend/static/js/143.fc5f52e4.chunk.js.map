{"version":3,"file":"static/js/143.fc5f52e4.chunk.js","mappings":"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","sources":["assets/svg/close.svg","components/InfoBadge/InfoBadge.tsx","services/EventService.ts","pages/EventsPage/EventsPage.tsx"],"sourcesContent":["var _line, _line2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgClose(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 15,\n    height: 15,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    className: \"feather feather-x\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 18,\n    y1: 6,\n    x2: 6,\n    y2: 18\n  })), _line2 || (_line2 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 6,\n    y1: 6,\n    x2: 18,\n    y2: 18\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.1bc230665c2ece0f1a76c0af957f07ec.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\r\nimport Close from '../../assets/svg/close.svg'\r\nimport './InfoBadge.css'\r\n\r\ninterface InfoBadgeProps {\r\n  text: string | number\r\n  id?: string\r\n  className?: string\r\n  onClose: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst InfoBadge: React.FC<InfoBadgeProps> = ({\r\n  text,\r\n  id,\r\n  className,\r\n  onClose\r\n}) => (\r\n  <span\r\n    id={id}\r\n    className={'info-badge ' + (className ?? '') }\r\n  >\r\n    {text}\r\n    <img\r\n      className='info-badge-close'\r\n      src={Close}\r\n      alt=\"Close SVG\"\r\n      onClick={(event) => { onClose(event) }}\r\n    />\r\n  </span>\r\n)\r\n\r\nexport default InfoBadge\r\n","import request from '../http'\r\n\r\nconst getAll = async (params: URLSearchParams): Promise<any> => {\r\n  return await request('/api/events', params.toString())\r\n}\r\n\r\nconst deleteGiven = async (ids: string[], apiKey: string): Promise<any> => {\r\n  const options = {\r\n    method: 'POST',\r\n    body: JSON.stringify({ ids: ids }),\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json;charset=UTF-8',\r\n      'Api-Key': apiKey\r\n    }\r\n  }\r\n  return await request('/api/events/delete', '', options)\r\n}\r\n\r\nconst EventService = {\r\n  getAll,\r\n  deleteGiven\r\n}\r\n\r\nexport default EventService\r\n","import React, { useState, useEffect, type ReactNode, type ReactElement } from 'react'\r\nimport { useNavigate, useSearchParams } from 'react-router-dom'\r\nimport Filter from '../../assets/svg/filter.svg'\r\nimport Delete from '../../assets/svg/delete.svg'\r\nimport { useMainContext } from '../../store/MainStore'\r\nimport Table, { Order, type Row } from '../../components/Table/Table'\r\nimport RoundButton from '../../components/RoundButton/RoundButton'\r\nimport ButtonBadge from '../../components/ButtonBadge/ButtonBadge'\r\nimport Modal, { openModal, closeModal } from '../../components/Modal/Modal'\r\nimport ModalHeader from '../../components/Modal/ModalHeader'\r\nimport ModalBody from '../../components/Modal/ModalBody'\r\nimport ModalFooter from '../../components/Modal/ModalFooter'\r\nimport Collapsible, { openCollapsible, closeCollapsible } from '../../components/Collapsible/Collapsible'\r\nimport EventService from '../../services/EventService'\r\nimport ProgressBar from '../../components/ProgressBar/ProgressBar'\r\nimport InfoBadge from '../../components/InfoBadge/InfoBadge'\r\nimport ApiKeyInput from '../../components/ApiKeyInput/ApiKeyInput'\r\nimport { dumpDate, longText, parseDeletionResponse } from '../../utils/functions'\r\nimport './EventsPage.css'\r\n\r\ninterface Test {\r\n  id: number\r\n  uid: string\r\n  file: string\r\n  marks: string[]\r\n  total_events_count: number\r\n};\r\n\r\ninterface Event {\r\n  id: string\r\n  message: string\r\n  server_timestamp: string\r\n  client_timestamp: string\r\n  traceback: string\r\n  test: Test\r\n};\r\n\r\nconst header = [\r\n  {\r\n    id: 'message-collumn',\r\n    label: 'Message',\r\n    order: Order.ASC\r\n  },\r\n  {\r\n    id: 'server-timestamp-collumn',\r\n    label: 'Server timestamp',\r\n    order: Order.DESC\r\n  },\r\n  {\r\n    id: 'client-timestamp-collumn',\r\n    label: 'Client timestamp',\r\n    order: Order.ASC\r\n  },\r\n  {\r\n    id: 'test-uid-collumn',\r\n    label: 'Test UID',\r\n    order: Order.ASC\r\n  },\r\n  {\r\n    id: 'test-marks-collumn',\r\n    label: 'Test marks',\r\n    order: Order.NULL\r\n  }\r\n]\r\n\r\nconst EventsPage: React.FC = () => {\r\n  const navigate = useNavigate()\r\n  const { setLoading, selectedEvents, setSelectedEvents } = useMainContext()\r\n  const [searchParams, setSearchParams] = useSearchParams()\r\n  const [filterParams, setFilterParams] = useState<Record<string, any>>({})\r\n  const [numberOfFilterParams, setNumberOfFilterParams] = useState<number>(0)\r\n  const [events, setEvents] = useState<Row[]>([])\r\n  const [pageNumber, setPageNumber] = useState<number>(0)\r\n  const [nextPage, setNextPage] = useState<boolean>(false)\r\n  const [prevPage, setPrevPage] = useState<boolean>(false)\r\n  const [count, setCount] = useState<number>(0)\r\n  const [pageLimit, setPageLimit] = useState<number>(0)\r\n  const [areSelectedAll, setAreSelectedAll] = useState<boolean>(false)\r\n  const [deletionStatus, setDeletionStatus] = useState<ReactNode | ReactElement>()\r\n  const [activeEventDetails, setActiveEventDetails] = useState<Event>()\r\n  const [apiKey, setApiKey] = useState<string>('')\r\n\r\n  const createRow = (event: Event): Row => {\r\n    const row = {\r\n      id: event.id.toString(),\r\n      data: [\r\n        {\r\n          id: 'message',\r\n          label: longText(event.message, 100),\r\n          onClick: () => { setActiveEventDetails(event); openModal('detail-modal') }\r\n        },\r\n        {\r\n          id: 'server-timestamp',\r\n          label: event.server_timestamp.replace('T', '  ')\r\n        },\r\n        {\r\n          id: 'client-timestamp',\r\n          label: event.client_timestamp.replace('T', '  ')\r\n        },\r\n        {\r\n          id: 'test-uid',\r\n          label: longText(event.test.uid, 40)\r\n        },\r\n        {\r\n          id: 'test-marks',\r\n          label: event.test.marks.join(', ')\r\n        }\r\n      ]\r\n    }\r\n    return row\r\n  }\r\n\r\n  const fetchEvents = (): void => {\r\n    setLoading(true)\r\n    EventService.getAll(searchParams)\r\n      .then((response) => {\r\n        const events = response.items.map((event: Event) => createRow(event))\r\n        const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n        const newFilterParams: Record<string, any> = {}\r\n\r\n        filterInputs.forEach((item: HTMLInputElement) => {\r\n          const paramName: string = item.id.split('-').slice(1, -1).join('_') ?? ''\r\n          const valueToSet: string[] = searchParams.getAll(paramName)\r\n\r\n          if (valueToSet.length > 0) {\r\n            if (paramName.includes('timestamp')) {\r\n              newFilterParams[paramName] = dumpDate(new Date(valueToSet[0]))\r\n            } else if (paramName.includes('mark')) {\r\n              newFilterParams.marks = valueToSet\r\n            } else {\r\n              newFilterParams[paramName] = valueToSet[0]\r\n            }\r\n          }\r\n        })\r\n\r\n        const newAreSelectedAll = selectedEvents.length !== 0 && (\r\n          events.filter((item: Row) => selectedEvents.includes(item.id)).length === events.length\r\n        )\r\n\r\n        setEvents(events)\r\n        setPageNumber(response.page_number)\r\n        setPrevPage(response.prev_page)\r\n        setNextPage(response.next_page)\r\n        setCount(response.count)\r\n        setPageLimit(response.page_limit)\r\n        setAreSelectedAll(newAreSelectedAll)\r\n        setFilterParams(newFilterParams)\r\n        setLoading(false)\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  useEffect(fetchEvents, [window.location.href])\r\n\r\n  useEffect(() => {\r\n    setNumberOfFilterParams(Object.keys(filterParams).length)\r\n  }, [filterParams])\r\n\r\n  const onSelectAllChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setAreSelectedAll(!areSelectedAll)\r\n    if (areSelectedAll) {\r\n      const eventsOnCurrentPage = events.map(item => item.id)\r\n      const newSelectedEvents = selectedEvents.filter(item => !eventsOnCurrentPage.includes(item))\r\n      setSelectedEvents(newSelectedEvents)\r\n    } else {\r\n      const eventsOnCurrentPageToAdd = events.filter(item => !selectedEvents.includes(item.id)).map(item => item.id)\r\n      const newSelectedEvents: string[] = [...selectedEvents, ...eventsOnCurrentPageToAdd]\r\n      setSelectedEvents(newSelectedEvents)\r\n    }\r\n  }\r\n\r\n  const onSelectOneChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { id, checked } = event.target\r\n    const newSelectedEvents = checked ? [...selectedEvents, id] : selectedEvents.filter(item => item !== id)\r\n    const newAreSelectedAll = events.filter(item => newSelectedEvents.includes(item.id)).length === events.length\r\n    setAreSelectedAll(newAreSelectedAll)\r\n    setSelectedEvents(newSelectedEvents)\r\n  }\r\n\r\n  const handleSorting = (id: string, order: Order): void => {\r\n    const orderPropertyName = id.replace('-collumn', '').replaceAll('-', '_')\r\n    const value = `${order === Order.DESC ? '-' : ''}${orderPropertyName}`\r\n    searchParams.set('ordering', value)\r\n    setSearchParams(searchParams)\r\n    navigate({ pathname: '/events', search: '?' + String(searchParams) })\r\n  }\r\n\r\n  /**\r\n   * Open filter modal\r\n   */\r\n  const handleFilterButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('filter-modal')\r\n    // Fill filter inputs\r\n    const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n    filterInputs.forEach((item: HTMLInputElement) => {\r\n      const valueToSet: string = searchParams.get(item.id.split('-').slice(1, -1).join('_')) ?? ''\r\n      if (valueToSet !== '') {\r\n        if (item.id.includes('timestamp')) {\r\n          item.value = dumpDate(new Date(valueToSet))\r\n        } else if (item.id.includes('mark')) {\r\n          item.value = ''\r\n        } else {\r\n          item.value = valueToSet\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Send filter query\r\n   */\r\n  const handleFilterModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    // Redirect with added filters\r\n    for (const [key, val] of Object.entries(filterParams)) {\r\n      if (key === 'marks') {\r\n        searchParams.delete('test_mark')\r\n        for (let i = 0; i < val.length; i++) {\r\n          searchParams.append('test_mark', String(val[i]))\r\n        }\r\n      } else {\r\n        searchParams.set(key, String(val))\r\n      }\r\n    }\r\n    searchParams.delete('page')\r\n    setSearchParams(searchParams)\r\n    setSelectedEvents([])\r\n    setAreSelectedAll(false)\r\n    closeModal('filter-modal')\r\n  }\r\n\r\n  /**\r\n   * Clear fields\r\n   */\r\n  const handleFilterModalClearButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n    filterInputs.forEach((item: HTMLInputElement) => {\r\n      item.value = ''\r\n      searchParams.delete(item.id.split('-').slice(1, -1).join('_'))\r\n    })\r\n    setFilterParams({})\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  const handleFilterInputFiled = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const queryParamName: string = event.target.id.split('-').slice(1, -1).join('_')\r\n    const value = queryParamName.includes('timestamp') ? dumpDate(new Date(event.target.value)) : event.target.value\r\n    if (event.target.value === '' && queryParamName in filterParams) {\r\n      const { [queryParamName]: _, ...rest } = filterParams\r\n      setFilterParams(rest)\r\n    } else {\r\n      setFilterParams({ ...filterParams, [queryParamName]: value })\r\n    }\r\n  }\r\n\r\n  const onAddMarksButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    const marksInput = document.querySelector('#filter-test-mark-input') as HTMLInputElement\r\n    if (marksInput !== null) {\r\n      const newFilterParams = { ...filterParams }\r\n      if (\r\n        marksInput.value !== '' &&\r\n        (newFilterParams.marks === undefined || newFilterParams.marks.indexOf(marksInput.value) === -1)\r\n      ) {\r\n        newFilterParams.marks = [...(newFilterParams.marks ?? []), marksInput.value]\r\n      }\r\n      marksInput.value = ''\r\n      setFilterParams(newFilterParams)\r\n    }\r\n  }\r\n\r\n  const onCloseMarkButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    if ('marks' in filterParams) {\r\n      const newFilterParams = { ...filterParams }\r\n      newFilterParams.marks = filterParams.marks.filter(\r\n        (item: string) => item !== event.currentTarget.parentNode?.textContent\r\n      )\r\n      setFilterParams(newFilterParams)\r\n    }\r\n  }\r\n\r\n  const handleDeleteButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('delete-modal')\r\n  }\r\n\r\n  const handleDeleteModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    if (selectedEvents.length !== 0) {\r\n      openCollapsible('deletion-in-progress')\r\n      closeCollapsible('deletion-done')\r\n      EventService.deleteGiven(selectedEvents, apiKey)\r\n        .then((responseData) => {\r\n          const summary = parseDeletionResponse(responseData)\r\n          setDeletionStatus(summary) // change name to summary\r\n          setTimeout(() => {\r\n            setSelectedEvents([])\r\n            closeCollapsible('deletion-in-progress')\r\n            openCollapsible('deletion-done')\r\n          }, 1000)\r\n        })\r\n        .catch((error) => {\r\n          setDeletionStatus(<p className=\"text-error\">Deletion error</p>)\r\n          setTimeout(() => {\r\n            closeCollapsible('deletion-in-progress')\r\n            openCollapsible('deletion-done')\r\n          }, 1000)\r\n          console.error(`Error details: ${String(error?.response?.detail ?? 'no details ')}`)\r\n        })\r\n    }\r\n  }\r\n\r\n  const onDeleteModalCloseButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    setDeletionStatus('')\r\n    setApiKey('')\r\n    closeCollapsible('deletion-done')\r\n    closeModal('delete-modal')\r\n    console.log(selectedEvents)\r\n    if (deletionStatus !== '') { fetchEvents() }\r\n  }\r\n\r\n  const handleUnselectButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('unselect-modal')\r\n  }\r\n\r\n  const onUnselectModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    setAreSelectedAll(false)\r\n    setSelectedEvents([])\r\n    closeModal('unselect-modal')\r\n  }\r\n\r\n  const onNextPageClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    searchParams.set('page', String(pageNumber + 1))\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  const onPrevPageClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    searchParams.set('page', String(pageNumber - 1))\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  const onInputApiKey = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setApiKey(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filters\">\r\n        <div className=\"row\">\r\n          <div className=\"col filter-button\">\r\n            <span className=\"brand\">Events</span>\r\n            <RoundButton onClick={handleFilterButtonClick}>\r\n              <img src={Filter} alt=\"Filter SVG\" />\r\n              {numberOfFilterParams > 0 && (\r\n                <ButtonBadge text={numberOfFilterParams} />\r\n              )}\r\n            </RoundButton>\r\n            <RoundButton onClick={handleDeleteButtonClick}>\r\n              <img src={Delete} alt=\"Delete SVG\" />\r\n            </RoundButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filter modal */}\r\n\r\n        <Modal id=\"filter-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Filter events</span>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              <label htmlFor=\"filter-message-input\">Message</label>\r\n              <input id=\"filter-message-input\"\r\n                type=\"text\"\r\n                placeholder=\"Type phrase to search\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-start-server-timestamp-input\">Start server timestamp</label>\r\n              <input\r\n                id=\"filter-start-server-timestamp-input\"\r\n                type=\"datetime-local\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-end-server-timestamp-input\">End end timestamp</label>\r\n              <input\r\n                id=\"filter-end-server-timestamp-input\"\r\n                type=\"datetime-local\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-start-client-timestamp-input\">Start client timestamp</label>\r\n              <input\r\n                id=\"filter-start-client-timestamp-input\"\r\n                type=\"datetime-local\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-end-client-timestamp-input\">End client timestamp</label>\r\n              <input\r\n                id=\"filter-end-client-timestamp-input\"\r\n                type=\"datetime-local\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-test-uid-input\">Test UID</label>\r\n              <input\r\n                id=\"filter-test-uid-input\"\r\n                type=\"text\"\r\n                placeholder=\"Type phrase to search\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-mark-input\">Mark</label>\r\n              <span className=\"grouped\">\r\n                <input id=\"filter-test-mark-input\"\r\n                  type=\"text\"\r\n                  placeholder=\"Type mark to search\"\r\n                />\r\n                <button id=\"addMark\" className=\"button\" onClick={ onAddMarksButtonClick }>Add</button>\r\n              </span>\r\n              <span>\r\n                {filterParams?.marks?.map((item: string, id: number) =>\r\n                  <InfoBadge key={id} text={item} onClose={onCloseMarkButtonClick}/>\r\n                )}\r\n              </span>\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={handleFilterModalConfirmButtonClick}>Submit</button>\r\n            <button className=\"button\" onClick={handleFilterModalClearButtonClick}>Clear</button>\r\n            <button className=\"button\" onClick={(e) => { closeModal('filter-modal') }}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Delete modal */}\r\n\r\n        <Modal id=\"delete-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Delete events</span>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            {(() => {\r\n              if (selectedEvents.length === 0) {\r\n                return <strong>No event selected to deletion.</strong>\r\n              } else {\r\n                const plural = selectedEvents.length > 1 ? 's' : ''\r\n                return <strong>{selectedEvents.length} event{plural} selected to deletion. </strong>\r\n              }\r\n            })()}\r\n            <ApiKeyInput\r\n              id=\"api-key-delete-modal\"\r\n              labelClassName=\"\"\r\n              inputClassName=\"\"\r\n              labelText=\"API Key\"\r\n              inputValue={apiKey}\r\n              onInputChange={onInputApiKey}\r\n            />\r\n            <Collapsible id=\"deletion-in-progress\">\r\n              <div style={ { marginBottom: '10px' } }>\r\n                <span>Deleting...</span>\r\n              </div>\r\n              <ProgressBar/>\r\n            </Collapsible>\r\n            <Collapsible id=\"deletion-done\">\r\n              <span className=\"text-primary\">Result:</span><br/>\r\n              <span>{deletionStatus}</span>\r\n            </Collapsible>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={handleDeleteModalConfirmButtonClick} disabled={apiKey === ''}>\r\n              Confirm\r\n            </button>\r\n            <button className=\"button\" onClick={onDeleteModalCloseButtonClick}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Unselect modal */}\r\n\r\n        <Modal id=\"unselect-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Unselect items</span>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            Do you confirm unselection of all items?\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={onUnselectModalConfirmButtonClick}>Confirm</button>\r\n            <button className=\"button\" onClick={(e) => { closeModal('unselect-modal') }}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Event details modal */}\r\n\r\n        <Modal id=\"detail-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Details</span>\r\n          </ModalHeader>\r\n          <ModalBody id=\"detail-modal-body\">\r\n            <strong>Message:</strong>\r\n            <pre className=\"event-code\">{activeEventDetails?.message}</pre>\r\n            <strong>Server timestamp:</strong>\r\n            <p>{activeEventDetails?.server_timestamp.replace('T', '  ')}</p>\r\n            <strong>Client timestamp:</strong>\r\n            <p>{activeEventDetails?.client_timestamp.replace('T', '  ')}</p>\r\n            <strong>Test UID:</strong>\r\n            <p>{activeEventDetails?.test?.uid}</p>\r\n            <strong>Test file:</strong>\r\n            <p>{activeEventDetails?.test?.file}</p>\r\n            <strong>Test marks:</strong>\r\n            <p>{activeEventDetails?.test.marks.join(', ')}</p>\r\n            <strong>Traceback:</strong>\r\n            <pre className=\"event-code\">\r\n              {activeEventDetails?.traceback}\r\n            </pre>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button\" onClick={(e) => { closeModal('detail-modal') }}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n      </div>\r\n\r\n      <Table\r\n        header={header}\r\n        data={events}\r\n        selectedItemsInfo={selectedEvents.length === 0\r\n          ? ''\r\n          : selectedEvents.length === 1 ? '1 row selected' : `${selectedEvents.length} rows selected`}\r\n        pageInfo={`page ${pageNumber + 1} of ${count !== 0 ? Math.ceil(count / pageLimit) : 1}`}\r\n        secectedItems={selectedEvents}\r\n        selectAllChecked={areSelectedAll}\r\n        prevPageDisabled={!prevPage}\r\n        nextPageDisabled={!nextPage}\r\n        onSortClick={handleSorting}\r\n        onSelectAllChange={onSelectAllChange}\r\n        onSelectOneChange={onSelectOneChange}\r\n        onNextPageClick={onNextPageClick}\r\n        onPrevPageClick={onPrevPageClick}\r\n        onSelectedItemsClearClick={handleUnselectButtonClick}\r\n      />\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EventsPage\r\n"],"names":["_ref","text","id","className","onClose","_jsxs","children","_jsx","src","Close","alt","onClick","event","getAll","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","wrap","_context","prev","next","request","toString","abrupt","sent","stop","_x","apply","arguments","deleteGiven","_ref2","_callee2","ids","apiKey","options","_context2","method","body","JSON","stringify","headers","Accept","_x2","_x3","header","label","order","Order","ASC","DESC","NULL","_filterParams$marks","_activeEventDetails$t","_activeEventDetails$t2","navigate","useNavigate","_useMainContext","useMainContext","setLoading","selectedEvents","setSelectedEvents","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","filterParams","setFilterParams","_useState3","_useState4","numberOfFilterParams","setNumberOfFilterParams","_useState5","_useState6","events","setEvents","_useState7","_useState8","pageNumber","setPageNumber","_useState9","_useState10","nextPage","setNextPage","_useState11","_useState12","prevPage","setPrevPage","_useState13","_useState14","count","setCount","_useState15","_useState16","pageLimit","setPageLimit","_useState17","_useState18","areSelectedAll","setAreSelectedAll","_useState19","_useState20","deletionStatus","setDeletionStatus","_useState21","_useState22","activeEventDetails","setActiveEventDetails","_useState23","_useState24","setApiKey","fetchEvents","EventService","then","response","items","map","data","longText","message","openModal","server_timestamp","replace","client_timestamp","test","uid","marks","join","createRow","filterInputs","document","querySelectorAll","newFilterParams","forEach","item","_item$id$split$slice$","paramName","split","slice","valueToSet","length","includes","dumpDate","Date","newAreSelectedAll","filter","page_number","prev_page","next_page","page_limit","catch","e","console","log","useEffect","window","location","href","Object","keys","handleFilterInputFiled","queryParamName","target","value","rest","_objectWithoutProperties","_toPropertyKey","_objectSpread","_defineProperty","onCloseMarkButtonClick","_event$currentTarget$","currentTarget","parentNode","textContent","_Fragment","RoundButton","_searchParams$get","get","Filter","ButtonBadge","Delete","Modal","ModalHeader","ModalBody","htmlFor","type","placeholder","onChange","marksInput","querySelector","_newFilterParams$mark","undefined","indexOf","concat","_toConsumableArray","InfoBadge","ModalFooter","_i","_Object$entries","entries","_Object$entries$_i","key","val","delete","i","append","String","set","closeModal","plural","ApiKeyInput","labelClassName","inputClassName","labelText","inputValue","onInputChange","Collapsible","style","marginBottom","ProgressBar","openCollapsible","closeCollapsible","responseData","summary","parseDeletionResponse","setTimeout","error","_error$response$detai","_error$response","detail","disabled","file","traceback","Table","selectedItemsInfo","pageInfo","Math","ceil","secectedItems","selectAllChecked","prevPageDisabled","nextPageDisabled","onSortClick","orderPropertyName","replaceAll","pathname","search","onSelectAllChange","eventsOnCurrentPage","newSelectedEvents","eventsOnCurrentPageToAdd","onSelectOneChange","_event$target","checked","onNextPageClick","onPrevPageClick","onSelectedItemsClearClick"],"sourceRoot":""}