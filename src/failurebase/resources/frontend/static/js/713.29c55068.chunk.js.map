{"version":3,"file":"static/js/713.29c55068.chunk.js","mappings":"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","sources":["assets/svg/close.svg","components/InfoBadge/InfoBadge.tsx","services/TestService.ts","pages/TestsPage/TestsPage.tsx"],"sourcesContent":["var _line, _line2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgClose(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 15,\n    height: 15,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    className: \"feather feather-x\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 18,\n    y1: 6,\n    x2: 6,\n    y2: 18\n  })), _line2 || (_line2 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 6,\n    y1: 6,\n    x2: 18,\n    y2: 18\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.1bc230665c2ece0f1a76c0af957f07ec.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\r\nimport Close from '../../assets/svg/close.svg'\r\nimport './InfoBadge.css'\r\n\r\ninterface InfoBadgeProps {\r\n  text: string | number\r\n  id?: string\r\n  className?: string\r\n  onClose: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst InfoBadge: React.FC<InfoBadgeProps> = ({\r\n  text,\r\n  id,\r\n  className,\r\n  onClose\r\n}) => (\r\n  <span\r\n    id={id}\r\n    className={'info-badge ' + (className ?? '') }\r\n  >\r\n    {text}\r\n    <img\r\n      className='info-badge-close'\r\n      src={Close}\r\n      alt=\"Close SVG\"\r\n      onClick={(event) => { onClose(event) }}\r\n    />\r\n  </span>\r\n)\r\n\r\nexport default InfoBadge\r\n","import request from '../http'\r\n\r\nconst getAll = async (params: URLSearchParams): Promise<any> => {\r\n  return await request('/api/tests', params.toString())\r\n}\r\n\r\nconst deleteGiven = async (ids: string[], apiKey: string): Promise<any> => {\r\n  const options = {\r\n    method: 'POST',\r\n    body: JSON.stringify({ ids: ids }),\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json;charset=UTF-8',\r\n      'Api-Key': apiKey\r\n    }\r\n  }\r\n  return await request('/api/tests/delete', '', options)\r\n}\r\n\r\nconst TestService = {\r\n  getAll,\r\n  deleteGiven\r\n}\r\n\r\nexport default TestService\r\n","import React, { useState, useEffect, type ReactNode, type ReactElement } from 'react'\r\nimport { useNavigate, useSearchParams } from 'react-router-dom'\r\nimport Filter from '../../assets/svg/filter.svg'\r\nimport Delete from '../../assets/svg/delete.svg'\r\nimport { useMainContext } from '../../store/MainStore'\r\nimport Table, { Order, type Row } from '../../components/Table/Table'\r\nimport RoundButton from '../../components/RoundButton/RoundButton'\r\nimport ButtonBadge from '../../components/ButtonBadge/ButtonBadge'\r\nimport Modal, { openModal, closeModal } from '../../components/Modal/Modal'\r\nimport ModalHeader from '../../components/Modal/ModalHeader'\r\nimport ModalBody from '../../components/Modal/ModalBody'\r\nimport ModalFooter from '../../components/Modal/ModalFooter'\r\nimport Collapsible, { openCollapsible, closeCollapsible } from '../../components/Collapsible/Collapsible'\r\nimport TestService from '../../services/TestService'\r\nimport ProgressBar from '../../components/ProgressBar/ProgressBar'\r\nimport InfoBadge from '../../components/InfoBadge/InfoBadge'\r\nimport ApiKeyInput from '../../components/ApiKeyInput/ApiKeyInput'\r\nimport { dumpDate, longText, parseDeletionResponse } from '../../utils/functions'\r\nimport './TestsPage.css'\r\n\r\ninterface Test {\r\n  id: number\r\n  uid: string\r\n  file: string\r\n  marks: string[]\r\n  total_events_count: number\r\n};\r\n\r\nconst header = [\r\n  {\r\n    id: 'uid-collumn',\r\n    label: 'UID',\r\n    order: Order.ASC\r\n  },\r\n  {\r\n    id: 'file-collumn',\r\n    label: 'File',\r\n    order: Order.DESC\r\n  },\r\n  {\r\n    id: 'total-events-count-collumn',\r\n    label: 'Events Count',\r\n    order: Order.ASC\r\n  },\r\n  {\r\n    id: 'marks-collumn',\r\n    label: 'Marks',\r\n    order: Order.NULL\r\n  }\r\n]\r\n\r\nconst TestsPage: React.FC = () => {\r\n  const navigate = useNavigate()\r\n  const { setLoading, selectedTests, setSelectedTests } = useMainContext()\r\n  const [searchParams, setSearchParams] = useSearchParams()\r\n  const [filterParams, setFilterParams] = useState<Record<string, any>>({})\r\n  const [numberOfFilterParams, setNumberOfFilterParams] = useState<number>(0)\r\n  const [tests, setTests] = useState<Row[]>([])\r\n  const [pageNumber, setPageNumber] = useState<number>(0)\r\n  const [nextPage, setNextPage] = useState<boolean>(false)\r\n  const [prevPage, setPrevPage] = useState<boolean>(false)\r\n  const [count, setCount] = useState<number>(0)\r\n  const [pageLimit, setPageLimit] = useState<number>(0)\r\n  const [areSelectedAll, setAreSelectedAll] = useState<boolean>(false)\r\n  const [deletionStatus, setDeletionStatus] = useState<ReactNode | ReactElement>()\r\n  const [activeTestDetails, setActiveTestDetails] = useState<Test>()\r\n  const [apiKey, setApiKey] = useState<string>('')\r\n\r\n  const createRow = (test: Test): Row => {\r\n    const row = {\r\n      id: test.id.toString(),\r\n      data: [\r\n        {\r\n          id: 'uid',\r\n          label: longText(test.uid, 100),\r\n          onClick: () => { setActiveTestDetails(test); openModal('detail-modal') }\r\n        },\r\n        {\r\n          id: 'file',\r\n          label: longText(test.file, 100)\r\n        },\r\n        {\r\n          id: 'total_events_count',\r\n          label: test.total_events_count.toString()\r\n        },\r\n        {\r\n          id: 'test-marks',\r\n          label: test.marks.join(', ')\r\n        }\r\n      ]\r\n    }\r\n    return row\r\n  }\r\n\r\n  const fetchTests = (): void => {\r\n    setLoading(true)\r\n\r\n    TestService.getAll(searchParams)\r\n      .then((response) => {\r\n        const tests = response.items.map((test: Test) => createRow(test))\r\n        const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n        const newFilterParams: Record<string, any> = {}\r\n\r\n        filterInputs.forEach((item: HTMLInputElement) => {\r\n          const paramName: string = item.id.split('-').slice(1, -1).join('_') ?? ''\r\n          const valueToSet: string[] = searchParams.getAll(paramName)\r\n\r\n          if (valueToSet.length > 0) {\r\n            if (paramName.includes('timestamp')) {\r\n              newFilterParams[paramName] = dumpDate(new Date(valueToSet[0]))\r\n            } else if (paramName.includes('mark')) {\r\n              newFilterParams.marks = valueToSet\r\n            } else {\r\n              newFilterParams[paramName] = valueToSet[0]\r\n            }\r\n          }\r\n        })\r\n\r\n        const newAreSelectedAll = selectedTests.length !== 0 && (\r\n          tests.filter((item: Row) => selectedTests.includes(item.id)).length === tests.length\r\n        )\r\n\r\n        setTests(tests)\r\n        setPageNumber(response.page_number)\r\n        setPrevPage(response.prev_page)\r\n        setNextPage(response.next_page)\r\n        setCount(response.count)\r\n        setPageLimit(response.page_limit)\r\n        setAreSelectedAll(newAreSelectedAll)\r\n        setFilterParams(newFilterParams)\r\n        setLoading(false)\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  useEffect(fetchTests, [window.location.href])\r\n\r\n  useEffect(() => {\r\n    setNumberOfFilterParams(Object.keys(filterParams).length)\r\n  }, [filterParams])\r\n\r\n  const onSelectAllChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setAreSelectedAll(!areSelectedAll)\r\n    if (areSelectedAll) {\r\n      const testsOnCurrentPage = tests.map(item => item.id)\r\n      const newSelectedTests = selectedTests.filter(item => !testsOnCurrentPage.includes(item))\r\n      setSelectedTests(newSelectedTests)\r\n    } else {\r\n      const testsOnCurrentPageToAdd = tests.filter(item => !selectedTests.includes(item.id)).map(item => item.id)\r\n      const newSelectedTests: string[] = [...selectedTests, ...testsOnCurrentPageToAdd]\r\n      setSelectedTests(newSelectedTests)\r\n    }\r\n  }\r\n\r\n  const onSelectOneChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { id, checked } = event.target\r\n    const newSelectedTests = checked ? [...selectedTests, id] : selectedTests.filter(item => item !== id)\r\n    const newAreSelectedAll = tests.filter(item => newSelectedTests.includes(item.id)).length === tests.length\r\n    setAreSelectedAll(newAreSelectedAll)\r\n    setSelectedTests(newSelectedTests)\r\n  }\r\n\r\n  const handleSorting = (id: string, order: Order): void => {\r\n    const orderPropertyName = id.replace('-collumn', '').replaceAll('-', '_')\r\n    const value = `${order === Order.DESC ? '-' : ''}${orderPropertyName}`\r\n    searchParams.set('ordering', value)\r\n    setSearchParams(searchParams)\r\n    navigate({ pathname: '/tests', search: '?' + String(searchParams) })\r\n  }\r\n\r\n  /**\r\n   * Open filter modal\r\n   */\r\n  const handleFilterButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('filter-modal')\r\n    // Fill filter inputs\r\n    const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n    filterInputs.forEach((item: HTMLInputElement) => {\r\n      const valueToSet: string = searchParams.get(item.id.split('-').slice(1, -1).join('_')) ?? ''\r\n      if (valueToSet !== '') {\r\n        if (item.id.includes('timestamp')) {\r\n          item.value = dumpDate(new Date(valueToSet))\r\n        } else if (item.id.includes('mark')) {\r\n          item.value = ''\r\n        } else {\r\n          item.value = valueToSet\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Send filter query\r\n   */\r\n  const handleFilterModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    // Redirect with added filters\r\n    for (const [key, val] of Object.entries(filterParams)) {\r\n      if (key === 'marks') {\r\n        searchParams.delete('mark')\r\n        for (let i = 0; i < val.length; i++) {\r\n          searchParams.append('mark', String(val[i]))\r\n        }\r\n      } else {\r\n        searchParams.set(key, String(val))\r\n      }\r\n    }\r\n    searchParams.delete('page')\r\n    setSearchParams(searchParams)\r\n    setSelectedTests([])\r\n    setAreSelectedAll(false)\r\n    closeModal('filter-modal')\r\n  }\r\n\r\n  /**\r\n   * Clear fields\r\n   */\r\n  const handleFilterModalClearButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    const filterInputs = document.querySelectorAll<HTMLInputElement>('#filter-modal input')\r\n    filterInputs.forEach((item: HTMLInputElement) => {\r\n      item.value = ''\r\n      searchParams.delete(item.id.split('-').slice(1, -1).join('_'))\r\n    })\r\n    setFilterParams({})\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  const handleFilterInputFiled = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const queryParamName: string = event.target.id.split('-').slice(1, -1).join('_')\r\n    const value = queryParamName.includes('timestamp') ? dumpDate(new Date(event.target.value)) : event.target.value\r\n    if (event.target.value === '' && queryParamName in filterParams) {\r\n      const { [queryParamName]: _, ...rest } = filterParams\r\n      setFilterParams(rest)\r\n    } else {\r\n      setFilterParams({ ...filterParams, [queryParamName]: value })\r\n    }\r\n  }\r\n\r\n  const onAddMarksButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    const marksInput = document.querySelector('#filter-mark-input') as HTMLInputElement\r\n    if (marksInput !== null) {\r\n      const newFilterParams = { ...filterParams }\r\n      if (\r\n        marksInput.value !== '' &&\r\n        (newFilterParams.marks === undefined || newFilterParams.marks.indexOf(marksInput.value) === -1)\r\n      ) {\r\n        newFilterParams.marks = [...(newFilterParams.marks ?? []), marksInput.value]\r\n      }\r\n      marksInput.value = ''\r\n      setFilterParams(newFilterParams)\r\n    }\r\n  }\r\n\r\n  const onCloseMarkButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    if ('marks' in filterParams) {\r\n      const newFilterParams = { ...filterParams }\r\n      newFilterParams.marks = filterParams.marks.filter(\r\n        (item: string) => item !== event.currentTarget.parentNode?.textContent\r\n      )\r\n      setFilterParams(newFilterParams)\r\n    }\r\n  }\r\n\r\n  const handleDeleteButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('delete-modal')\r\n  }\r\n\r\n  const handleDeleteModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    if (selectedTests.length !== 0) {\r\n      openCollapsible('deletion-in-progress')\r\n      closeCollapsible('deletion-done')\r\n      TestService.deleteGiven(selectedTests, apiKey)\r\n        .then((responseData) => {\r\n          const summary = parseDeletionResponse(responseData)\r\n          setDeletionStatus(summary) // change name to summary\r\n          setTimeout(() => {\r\n            setSelectedTests([])\r\n            closeCollapsible('deletion-in-progress')\r\n            openCollapsible('deletion-done')\r\n          }, 1000)\r\n        })\r\n        .catch((error) => {\r\n          setDeletionStatus(<p className=\"text-error\">Deletion error</p>)\r\n          setTimeout(() => {\r\n            closeCollapsible('deletion-in-progress')\r\n            openCollapsible('deletion-done')\r\n          }, 1000)\r\n          console.error(`Error details: ${String(error?.response?.detail ?? 'no details ')}`)\r\n        })\r\n    }\r\n  }\r\n\r\n  const onDeleteModalCloseButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    setDeletionStatus('')\r\n    setApiKey('')\r\n    closeCollapsible('deletion-done')\r\n    closeModal('delete-modal')\r\n    if (deletionStatus !== '') { fetchTests() }\r\n  }\r\n\r\n  const handleUnselectButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    openModal('unselect-modal')\r\n  }\r\n\r\n  const onUnselectModalConfirmButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    setAreSelectedAll(false)\r\n    setSelectedTests([])\r\n    closeModal('unselect-modal')\r\n  }\r\n\r\n  const onNextPageClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    searchParams.set('page', String(pageNumber + 1))\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  const onPrevPageClick = (event: React.MouseEvent<HTMLElement>): void => {\r\n    searchParams.set('page', String(pageNumber - 1))\r\n    setSearchParams(searchParams)\r\n  }\r\n\r\n  const onInputApiKey = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setApiKey(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filters\">\r\n        <div className=\"row\">\r\n          <div className=\"col filter-button\">\r\n            <span className=\"brand\">Tests</span>\r\n            <RoundButton onClick={handleFilterButtonClick}>\r\n              <img src={Filter} alt=\"Filter SVG\" />\r\n              {numberOfFilterParams > 0 && (\r\n                <ButtonBadge text={numberOfFilterParams} />\r\n              )}\r\n            </RoundButton>\r\n            <RoundButton onClick={handleDeleteButtonClick}>\r\n              <img src={Delete} alt=\"Delete SVG\" />\r\n            </RoundButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filter modal */}\r\n\r\n        <Modal id=\"filter-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Filter tests</span>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              <label htmlFor=\"filter-uid-input\">UID</label>\r\n              <input id=\"filter-uid-input\"\r\n                type=\"text\"\r\n                placeholder=\"Type phrase to search\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-file-input\">File</label>\r\n              <input id=\"filter-file-input\"\r\n                type=\"text\"\r\n                placeholder=\"Type phrase to search\"\r\n                onChange={handleFilterInputFiled}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor=\"filter-mark-input\">Mark</label>\r\n              <span className=\"grouped\">\r\n                <input id=\"filter-mark-input\"\r\n                  type=\"text\"\r\n                  placeholder=\"Type mark to search\"\r\n                />\r\n                <button id=\"addMark\" className=\"button\" onClick={ onAddMarksButtonClick }>Add</button>\r\n              </span>\r\n              <span>\r\n                {filterParams?.marks?.map((item: string, id: number) =>\r\n                  <InfoBadge key={id} text={item} onClose={onCloseMarkButtonClick}/>\r\n                )}\r\n              </span>\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={handleFilterModalConfirmButtonClick}>Submit</button>\r\n            <button className=\"button\" onClick={handleFilterModalClearButtonClick}>Clear</button>\r\n            <button className=\"button\" onClick={(e) => { closeModal('filter-modal') }}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Delete modal */}\r\n\r\n        <Modal id=\"delete-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Delete tests</span>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            {(() => {\r\n              if (selectedTests.length === 0) {\r\n                return <strong>No tests selected to deletion.</strong>\r\n              } else {\r\n                const plural = selectedTests.length > 1 ? 's' : ''\r\n                return <strong>{selectedTests.length} test{plural} selected to deletion. </strong>\r\n              }\r\n            })()}\r\n            <ApiKeyInput\r\n              id=\"api-key-delete-modal\"\r\n              labelClassName=\"\"\r\n              inputClassName=\"\"\r\n              labelText=\"API Key\"\r\n              inputValue={apiKey}\r\n              onInputChange={onInputApiKey}\r\n            />\r\n            <Collapsible id=\"deletion-in-progress\">\r\n              <div style={ { marginBottom: '10px' } }>\r\n                <span>Deleting...</span>\r\n              </div>\r\n              <ProgressBar/>\r\n            </Collapsible>\r\n            <Collapsible id=\"deletion-done\">\r\n              <span className=\"text-primary\">Result:</span><br/>\r\n              <span>{deletionStatus}</span>\r\n            </Collapsible>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={handleDeleteModalConfirmButtonClick} disabled={apiKey === ''}>\r\n              Confirm\r\n            </button>\r\n            <button className=\"button\" onClick={onDeleteModalCloseButtonClick}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Unselect modal */}\r\n\r\n        <Modal id=\"unselect-modal\">\r\n          <ModalHeader>\r\n            Unselect items\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            Do you confirm unselection of all items?\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button primary\" onClick={onUnselectModalConfirmButtonClick}>Confirm</button>\r\n            <button className=\"button\" onClick={(e) => { closeModal('unselect-modal') }}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        {/* Test details modal */}\r\n\r\n        <Modal id=\"detail-modal\">\r\n          <ModalHeader>\r\n            <span className=\"text-primary\">Details</span>\r\n          </ModalHeader>\r\n          <ModalBody id=\"detail-modal-body\">\r\n            <strong>UID:</strong>\r\n            <p>{activeTestDetails?.uid}</p>\r\n            <strong>File:</strong>\r\n            <p>{activeTestDetails?.file}</p>\r\n            <strong>Events count:</strong>\r\n            <p>{activeTestDetails?.total_events_count}</p>\r\n            <strong>Marks:</strong>\r\n            <p>{activeTestDetails?.marks.join(', ')}</p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"button\" onClick={(e) => { closeModal('detail-modal') }}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n      </div>\r\n\r\n      <Table\r\n        header={header}\r\n        data={tests}\r\n        selectedItemsInfo={selectedTests.length === 0\r\n          ? ''\r\n          : selectedTests.length === 1 ? '1 row selected' : `${selectedTests.length} rows selected`}\r\n        pageInfo={`page ${pageNumber + 1} of ${count !== 0 ? Math.ceil(count / pageLimit) : 1}`}\r\n        secectedItems={selectedTests}\r\n        selectAllChecked={areSelectedAll}\r\n        prevPageDisabled={!prevPage}\r\n        nextPageDisabled={!nextPage}\r\n        onSortClick={handleSorting}\r\n        onSelectAllChange={onSelectAllChange}\r\n        onSelectOneChange={onSelectOneChange}\r\n        onNextPageClick={onNextPageClick}\r\n        onPrevPageClick={onPrevPageClick}\r\n        onSelectedItemsClearClick={handleUnselectButtonClick}\r\n      />\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TestsPage\r\n"],"names":["_ref","text","id","className","onClose","_jsxs","children","_jsx","src","Close","alt","onClick","event","getAll","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","wrap","_context","prev","next","request","toString","abrupt","sent","stop","_x","apply","arguments","deleteGiven","_ref2","_callee2","ids","apiKey","options","_context2","method","body","JSON","stringify","headers","Accept","_x2","_x3","header","label","order","Order","ASC","DESC","NULL","_filterParams$marks","navigate","useNavigate","_useMainContext","useMainContext","setLoading","selectedTests","setSelectedTests","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","filterParams","setFilterParams","_useState3","_useState4","numberOfFilterParams","setNumberOfFilterParams","_useState5","_useState6","tests","setTests","_useState7","_useState8","pageNumber","setPageNumber","_useState9","_useState10","nextPage","setNextPage","_useState11","_useState12","prevPage","setPrevPage","_useState13","_useState14","count","setCount","_useState15","_useState16","pageLimit","setPageLimit","_useState17","_useState18","areSelectedAll","setAreSelectedAll","_useState19","_useState20","deletionStatus","setDeletionStatus","_useState21","_useState22","activeTestDetails","setActiveTestDetails","_useState23","_useState24","setApiKey","fetchTests","TestService","then","response","items","map","test","data","longText","uid","openModal","file","total_events_count","marks","join","createRow","filterInputs","document","querySelectorAll","newFilterParams","forEach","item","_item$id$split$slice$","paramName","split","slice","valueToSet","length","includes","dumpDate","Date","newAreSelectedAll","filter","page_number","prev_page","next_page","page_limit","catch","e","console","log","useEffect","window","location","href","Object","keys","handleFilterInputFiled","queryParamName","target","value","rest","_objectWithoutProperties","_toPropertyKey","_objectSpread","_defineProperty","onCloseMarkButtonClick","_event$currentTarget$","currentTarget","parentNode","textContent","_Fragment","RoundButton","_searchParams$get","get","Filter","ButtonBadge","Delete","Modal","ModalHeader","ModalBody","htmlFor","type","placeholder","onChange","marksInput","querySelector","_newFilterParams$mark","undefined","indexOf","concat","_toConsumableArray","InfoBadge","ModalFooter","_i","_Object$entries","entries","_Object$entries$_i","key","val","delete","i","append","String","set","closeModal","plural","ApiKeyInput","labelClassName","inputClassName","labelText","inputValue","onInputChange","Collapsible","style","marginBottom","ProgressBar","openCollapsible","closeCollapsible","responseData","summary","parseDeletionResponse","setTimeout","error","_error$response$detai","_error$response","detail","disabled","Table","selectedItemsInfo","pageInfo","Math","ceil","secectedItems","selectAllChecked","prevPageDisabled","nextPageDisabled","onSortClick","orderPropertyName","replace","replaceAll","pathname","search","onSelectAllChange","testsOnCurrentPage","newSelectedTests","testsOnCurrentPageToAdd","onSelectOneChange","_event$target","checked","onNextPageClick","onPrevPageClick","onSelectedItemsClearClick"],"sourceRoot":""}